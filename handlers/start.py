from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from keyboards.inline_kb import start_kb, medspec_kb, about_kb, petnetrubot_kb, reg_user_kb, admin_kb
from db_handler.postgres import db
from create_bot import admins

start_router = Router()

@start_router.message(CommandStart())
async def cmd_start(message: Message):
    if message.from_user.id in admins:  # –µ—Å–ª–∏ –∞–¥–º–∏–Ω
        await message.answer(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é',
            reply_markup=admin_kb(message.from_user.id)
        )
    else:
        agent = await db.fetchrow("SELECT full_name, requested_contract FROM agents WHERE telegram_id=$1",
                                    message.from_user.id
                                    )

        if agent:  # –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            full_name = agent['full_name']
            requested_contract = agent['requested_contract']
            kb = reg_user_kb(
                message.from_user.id,
                full_name=full_name,
                requested_contract=requested_contract
            )
            await message.answer(
                f"–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å, {full_name}! üëã",
                reply_markup=kb
            )
        else:  # –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await message.answer(
                "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤—Ä–∞—á–µ–π PET.PRO",
                reply_markup=start_kb(message.from_user.id)
            )

@start_router.callback_query(F.data == 'main_menu')
async def cmd_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_reply_markup()
    await callback.answer()
    if callback.from_user.id in admins: #–µ—Å–ª–∏ –∞–¥–º–∏–Ω
        await callback.message.answer(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é',
            reply_markup=admin_kb(callback.from_user.id)
        )
    else:
        agent = await db.fetchrow(
            "SELECT full_name, requested_contract FROM agents WHERE telegram_id=$1", callback.from_user.id
        )
        if agent:  # –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            kb = reg_user_kb(
                callback.from_user.id,
                full_name=agent['full_name'],
                requested_contract=agent['requested_contract']
            )
            await callback.message.edit_reply_markup(reply_markup=kb)
        else: # –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await callback.message.answer(
                "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤—Ä–∞—á–µ–π PET.PRO",
                reply_markup=start_kb(callback.from_user.id)
            )

@start_router.callback_query(F.data == 'about')
async def cmd_about(callback: CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.answer()
    await callback.message.answer('–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤—Ä–∞—á–µ–π PET.PRO, –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–µ –º–µ—Ç–æ–¥—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ü–≠–¢/–ö–¢ –æ—Ç —Å–µ—Ç–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ —è–¥–µ—Ä–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –ü–≠–¢ –¢–µ—Ö–Ω–æ–ª–æ–¥–∂–∏.',
                                  reply_markup = about_kb(callback.from_user.id))

@start_router.callback_query(F.data.in_(['is_doctor_no', 'is_doctor_yes']))
async def cmd_about(callback: CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.answer()
    if callback.data == 'is_doctor_no':
        await callback.message.answer('–ï—Å–ª–∏ –≤—ã –ø–∞—Ü–∏–µ–Ω—Ç –∏ –∏—â–µ—Ç–µ –∫–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—É—é —Å–µ—Ç—å –∫–ª–∏–Ω–∏–∫ –ü–≠–¢-–¢–µ—Ö–Ω–æ–ª–æ–¥–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ üëâ @petnetru_bot',
                                      reply_markup = petnetrubot_kb(callback.from_user.id))
    else: #callback.data == 'is_doctor_yes':
        await callback.message.answer('–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                                      reply_markup=medspec_kb(callback.from_user.id))
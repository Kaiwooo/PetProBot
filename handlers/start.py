from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from keyboards.inline_kb import main_kb, medspec_kb, about_kb, petnetrubot_kb
from create_bot import bot
from handlers.registration import registered_users
from aiogram.types import BotCommand, BotCommandScopeChat

start_router = Router()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@start_router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id

    if registered_users.get(user_id):
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await bot.set_my_commands(
            [
                BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                BotCommand(command="make_request", description="–°–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∫—É")
            ],
            scope=BotCommandScopeChat(chat_id=user_id)
        )
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!",
            reply_markup=main_kb(user_id)
        )
    else:
        # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await bot.set_my_commands(
            [
                BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                BotCommand(command="registration", description="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            ],
            scope=BotCommandScopeChat(chat_id=user_id)
        )
        await message.answer(
            "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤—Ä–∞—á–µ–π PET.PRO\n"
            "–í—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç?",
            reply_markup=medspec_kb(user_id)  # inline-–∫–Ω–æ–ø–∫–∏ "–î–∞/–ù–µ—Ç"
        )

# --- –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
@start_router.callback_query(F.data == 'registration')
async def cmd_registration(callback: CallbackQuery):
    await callback.message.answer(
        '–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –í—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç?',
        reply_markup=medspec_kb(callback.from_user.id)
    )
    await callback.answer()

# --- –ö–Ω–æ–ø–∫–∞ –æ –±–æ—Ç–µ ---
@start_router.callback_query(F.data == 'about')
async def cmd_about(callback: CallbackQuery):
    await callback.message.answer(
        '–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤—Ä–∞—á–µ–π PET.PRO, '
        '–ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–µ –º–µ—Ç–æ–¥—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ü–≠–¢/–ö–¢ –æ—Ç —Å–µ—Ç–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ —è–¥–µ—Ä–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –ü–≠–¢ –¢–µ—Ö–Ω–æ–ª–æ–¥–∂–∏.',
        reply_markup=about_kb(callback.from_user.id)
    )
    await callback.answer()

# --- –ö–Ω–æ–ø–∫–∞ –µ—Å–ª–∏ –Ω–µ –¥–æ–∫—Ç–æ—Ä ---
@start_router.callback_query(F.data == 'is_doctor_no')
async def cmd_not_doctor(callback: CallbackQuery):
    await callback.message.answer(
        '–ï—Å–ª–∏ –≤—ã –ø–∞—Ü–∏–µ–Ω—Ç –∏ –∏—â–µ—Ç–µ –∫–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—É—é —Å–µ—Ç—å –∫–ª–∏–Ω–∏–∫ –ü–≠–¢-–¢–µ—Ö–Ω–æ–ª–æ–¥–∂–∏, '
        '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ üëâ @petnetru_bot',
        reply_markup=petnetrubot_kb(callback.from_user.id)
    )
    await callback.answer()

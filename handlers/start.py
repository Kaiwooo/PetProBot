from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery
from keyboards.inline_kb import main_kb, medspec_kb, about_kb, petnetrubot_kb, reg_user_kb
from handlers.registration import users_data

start_router = Router()

@start_router.message(CommandStart())
async def cmd_start(message: Message, command: Command):
    tg_user_id = message.from_user.id
    command_args: str = command.args  # –ø–æ–ª—É—á–∞–µ–º payload –ø–æ—Å–ª–µ /start

    if command_args:
        if command_args.lower() == "yana":
            await message.answer("–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∞ –Ø–Ω–∞.")

    if tg_user_id in users_data:
        # –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        full_name = users_data[tg_user_id].get("full_name", "–£—á–∞—Å—Ç–Ω–∏–∫")
        await message.answer(
            f"–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å, {full_name}! üëã",
            reply_markup=reg_user_kb(tg_user_id)
        )
    else:
        # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer(
            "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤—Ä–∞—á–µ–π PET.PRO",
            reply_markup=main_kb(tg_user_id)
        )

@start_router.callback_query(F.data == 'main_menu')
async def cmd_main_menu(callback: CallbackQuery):
    await callback.message.answer('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤—Ä–∞—á–µ–π PET.PRO',
                         reply_markup=main_kb(callback.from_user.id))
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

@start_router.callback_query(F.data == 'registration')
async def cmd_registration(callback: CallbackQuery):
    await callback.message.answer('–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –í—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç?',
                         reply_markup=medspec_kb(callback.from_user.id))
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

@start_router.callback_query(F.data == 'about')
async def cmd_about(callback: CallbackQuery):
    await callback.message.answer('–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤—Ä–∞—á–µ–π PET.PRO, –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–µ –º–µ—Ç–æ–¥—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ü–≠–¢/–ö–¢ –æ—Ç —Å–µ—Ç–∏ —Ü–µ–Ω—Ç—Ä–æ–≤ —è–¥–µ—Ä–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –ü–≠–¢ –¢–µ—Ö–Ω–æ–ª–æ–¥–∂–∏.',
                                  reply_markup = about_kb(callback.from_user.id))
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

@start_router.callback_query(F.data == 'is_doctor_no')
async def cmd_about(callback: CallbackQuery):
    await callback.message.answer('–ï—Å–ª–∏ –≤—ã –ø–∞—Ü–∏–µ–Ω—Ç –∏ –∏—â–µ—Ç–µ –∫–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—É—é —Å–µ—Ç—å –∫–ª–∏–Ω–∏–∫ –ü–≠–¢-–¢–µ—Ö–Ω–æ–ª–æ–¥–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ üëâ @petnetru_bot',
                                  reply_markup = petnetrubot_kb(callback.from_user.id))
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ